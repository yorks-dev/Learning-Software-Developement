1. Get individual characters in C++ using cin.get().

Q1. N strings given to us. WE print the max string according to the dictionary.

>> ab, cd, ef, gh;
-> gh.

// char max_string[100];
// we copy an array(String) into the long array.

void copy(char toBeStoredIn[], char fromWhichToBeCopied[]){
    
    int i = 0;
    for(i = 0; fromWhichToBeCopied[i] != 0; i++){
        toBeStoredIn[i] = fromWhichToBeCopied[i];
    }
    toBeStoredIn[i] = '\0';
}

bool compare(char sr1[], char str2[]){
    
    int i = 0;
    for(;i < min(length(str1), length(str2)); i++){
        if(str1[i] > str2[i])
            return true;
        else if(str1[i] < str2[i])
            return false;
    }
    if(length(str1) > length(str2))
        return true;
    else
        return false;

}

int main(){
    int n;
    cin >> n;
    char max_string [100];
    char arr[100];
    cin >> arr;
    copy(max_string, arr);

    for(int i = 1; i < n; i++){
        cin >> arr;
        if(compare(max_string, arr) == false){
            copy(max_string, arr);
        }
    }
    
    cout << max_string << endl;
    
}

2. Read a string and read an integer.

#include <iostream>
using namespace std;

int main()
{
    int n;
    cin >> n;
    char arr[100];
    
    cin.ignore(); // ignores '\n'
    
    cin.getline(arr, 100);
    cout << arr << endl;
}

3. Sum of 3 numbers // default variables.

int add(int a = 0, int b = 0, int c = 0) // we have to give default values from theht right.
    return a+b+c;

int main(){
    int a, b, c;
    cin >> a >> b >> c;
    
    int sum = add(a, b, c);
    cout << sum << endl;
}


4. Rotating String according to input n (n times);
// we will shift every items n places.

int main(){

    char arr[100];
    int n;
    cin >> n;
    cin >> arr;
    
    int l = length(arr);
    for(int i = l - 1; i >= 0; i++){
        arr[i+n] = arr[i]; // shifting every element n places to take values from length index to length +n;
        COMPLETE IT;
    }

}
    
5. Check permutation in a string.

abc -> bca (they are same)    

we will increment the num at index.
count_arr1[str1[i]]++;
count_arr2[str2[i]]++;

then we will compare the 2 strings and if the count at position is not the same we will return 0;


CODE :

int main(){

    char a1[100];
    char a2[100];
    
    cin >> a1 >> a2;
    
    int f1[26] = {0};
    int f2[26] = {0};
    
    for(int i = 0; a1[i] != '\0'; i++){
        int x = a1[i] - 'a';
        f1[x]++;
    }
    for(int i = 0; a2[i] != '\0'; i++){
        int x = a2[i] - 'a';
        f2[x]++;
    }
    
    bool isPermutation = true;
    for(int i = 0; i < 26; i++){
        if(f1[i] != f2[i]){
            isPermutation = false;
            break;
        }
    }
    
    cout << isPermutation << endl;
}


------------
|| STRING ||
------------

string s = "";
cin >> s[0];

We can add string using +;
we can compare strings with < or > operator. (dictionary order).

string s;
getline(cin, s);
    
    
    
    
    
    
    
